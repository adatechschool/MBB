# Generated by Django 5.2 on 2025-04-21 20:20

import common.managers
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Hashtag",
            fields=[
                ("hashtag_id", models.AutoField(primary_key=True, serialize=False)),
                ("hashtag_name", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "db_table": "Hashtag",
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                ("role_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "role_name",
                    models.CharField(
                        choices=[
                            ("user", "User"),
                            ("admin", "Admin"),
                            ("moderator", "Moderator"),
                        ],
                        default="user",
                        max_length=255,
                    ),
                ),
            ],
            options={
                "verbose_name": "role",
                "verbose_name_plural": "roles",
                "db_table": "Role",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("user_id", models.AutoField(primary_key=True, serialize=False)),
                ("username", models.CharField(max_length=255)),
                ("email", models.EmailField(max_length=255, unique=True)),
                ("password", models.CharField(max_length=255)),
                (
                    "profile_picture",
                    models.ImageField(blank=True, null=True, upload_to="avatars/"),
                ),
                ("bio", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                ("date_joined", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        help_text="Role assigned to this user",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="common.role",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "db_table": "User",
            },
            managers=[
                ("objects", common.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                ("post_id", models.AutoField(primary_key=True, serialize=False)),
                ("post_content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Author of the post",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "Post",
            },
        ),
        migrations.CreateModel(
            name="Media",
            fields=[
                ("media_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "media_type",
                    models.CharField(
                        blank=True,
                        choices=[("image", "Image"), ("video", "Video")],
                        default="image",
                        max_length=50,
                    ),
                ),
                ("media_content", models.BinaryField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "post",
                    models.ForeignKey(
                        help_text="Post this media belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="common.post",
                    ),
                ),
            ],
            options={
                "db_table": "Media",
            },
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                ("comment_id", models.AutoField(primary_key=True, serialize=False)),
                ("comment_content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Author of the comment",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        help_text="Post this comment belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="common.post",
                    ),
                ),
            ],
            options={
                "db_table": "Comment",
            },
        ),
        migrations.CreateModel(
            name="Session",
            fields=[
                ("session_id", models.AutoField(primary_key=True, serialize=False)),
                ("token", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User associated with this session",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "Session",
            },
        ),
        migrations.CreateModel(
            name="Follow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("followed_at", models.DateTimeField(auto_now_add=True)),
                (
                    "followee",
                    models.ForeignKey(
                        help_text="The user being followed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="followers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "follower",
                    models.ForeignKey(
                        help_text="The user who follows",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="following",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "Follow",
                "unique_together": {("follower", "followee")},
            },
        ),
        migrations.CreateModel(
            name="Like",
            fields=[
                ("like_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who liked the post",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        help_text="Post that was liked",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="common.post",
                    ),
                ),
            ],
            options={
                "db_table": "Like",
                "unique_together": {("post", "user")},
            },
        ),
        migrations.CreateModel(
            name="PostHashtag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "hashtag",
                    models.ForeignKey(
                        help_text="Hashtag applied to the post",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="common.hashtag",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        help_text="Post tagged with the hashtag",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="common.post",
                    ),
                ),
            ],
            options={
                "db_table": "Post_Hashtag",
                "unique_together": {("post", "hashtag")},
            },
        ),
    ]
